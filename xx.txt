#include <iostream>
#include <fstream>
#include <cmath>
#include <ostream>
#include <array>
using namespace std;
const int startX = 2;
const int startY = 1;
const int destX = 4;
const int destY = 4;
const int maxX = 4;
const int maxY = 4;

double hVal(int x,int y,int destX, int destY)
{
    double h=sqrt(pow(x - destX, 2) + pow(y - destY, 2));
    return h;
}

/*void returning(int openList[][maxY],int gCountX,int gCountY)
{
    if(openList[][maxY]==0)
    {
        gCountY-=1;
    }
    if(openList[gCountX][maxY]==1)
    {
        gCountY+=1;
    }
    if(openList[][maxY]==2)
    {
        gCountX+=1;
    }
    if(openList[][maxY]==3)
    {
        gCountX-=1;
    }
}*/
int main()
{
    ifstream file;
    file.open("grid.txt");
    int moveX[4]={0,0,-1,1}; //ruch lewo prawo
    int moveY[4]={1,-1,0,0}; //ruch gora dol
    int openList[maxX][maxY] = {};
    int closedList[maxX][maxY] = {};
    int grid[maxX][maxY] = {};
    double values[maxX][maxY] = {};
    double distance[maxX][maxY] = {};
    //inicjalizacja grida
    for(int i=0;i<maxY;i++)
    {
        for(int j=0;j<maxX;j++)
        {
            file >> grid[i][j];
        }
    }
    int curX=startX;
    int curY=startY;
    int z=0;
    //values[destX][destY]==0 while to bedzie ale pozniej
while(closedList[destX][destY]==0)
{
    closedList[curX][curY] = 1;
    for(int i=0;i<4;i++) //petla ruszajaca sie gora dol lewa prawa po tablicy
    {

        int tmpX,tmpY = 0;
        int gCountX, gCountY;
        tmpX = curX+moveX[i];
        tmpY = curY+moveY[i];
        if(grid[tmpX][tmpY] == 5 || closedList[tmpX][tmpY] == 1 || tmpX < 0 || tmpY < 0 || tmpX > maxX-1 || tmpY > maxY-1)
        {
            continue;
        }
        distance[tmpX][tmpY]=distance[curX][curY]+1;
        cout<<"prntX: "<<curX<<"prntY: "<<curY<<endl;
        cout<<"X: "<<tmpX<<" Y: "<<tmpY<<" "<<endl;
        double fVal = distance[tmpX][tmpY]+hVal(tmpX,tmpY,destX,destY); //obliczanie f(poz)=g(poz)+h(poz)
        if(openList[tmpX][tmpY] == 0 || values[tmpX][tmpY]>fVal) //przypisanie indeksom tablicy values wartosci pola i tablicy openList informacji o rodzicu
        {
            values[tmpX][tmpY] = fVal;
            openList[tmpX][tmpY] = i;
        }

    }

    double tmpValue = 0;
    int minX = 0;
    int minY = 0;
    for(int i=0;i<maxY;i++)
    {
        for(int j=0;j<maxX;j++)
        {
            if((values[i][j] <= tmpValue || tmpValue == 0) && closedList[i][j] == 0 && grid[i][j] != 5)
            {
                tmpValue = values[i][j];
                minX = i;
                minY = j;
            }
        }
    }
    curX = minX;
    curY = minY;

z++;

}




    return 0;
}
